type AdminSettings
  @model
  @auth(
    rules: [
      { allow: public }
      {
        allow: groups
        groups: ["Administrator"]
        operations: [read, create, update, delete]
      }
    ]
  ) {
  id: ID!
  hacklyticsOpen: Boolean
  participantEmails: [String]
}

type Event
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrator"]
        operations: [read, create, update, delete]
      }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  description: String
  status: Boolean
  requireRSVP: Boolean
  canRSVP: Boolean
  start: AWSDateTime
  end: AWSDateTime
  location: String
  points: Int
  checkins: [Checkin] @hasMany
}

type Checkin
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrator"]
        operations: [read, create, update, delete]
      }
      { allow: private, operations: [create, read, update, delete] }
    ]
  ) {
  id: ID!
  createdBy: String!
  createdByName: String!
  user: String!
  userName: String!
  event: Event! @belongsTo
}

type Query {
  getUserById(user_uuid: String): String
    @function(name: "hacklyticsportal20232e32fd51-${env}")
  listUsers: String @function(name: "hacklyticsportal2023listusers-${env}")
}

type Points
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrator"]
        operations: [read, create, update, delete]
      }
      { allow: private, operations: [read, create, update] }
    ]
  ) {
  userID: String!
  userName: String
  points: Int!
}

type ScavengerHunt
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrator", "Scavenger"]
        operations: [read, create, update, delete]
      }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  name: String!
  description: String
  status: Boolean
  points: Int
}

type ScavengerHuntCheckin
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrator", "Scavenger"]
        operations: [read, create, update, delete]
      }
      { allow: private, operations: [read, create] }
    ]
  ) {
  id: ID!
  checkpointID: String!
  userID: String!
}

type EventRSVP
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Administrator"]
        operations: [read, create, update, delete]
      }
      { allow: owner, operations: [read, create, update, delete] }
    ]
  ) {
  id: ID!
  userID: String!
  userName: String!
  eventID: String!
}
